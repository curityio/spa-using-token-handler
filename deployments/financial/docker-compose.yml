services:

  #
  # The web host only serves static content
  #
  webhost:
    image: webhost:1.0.0
    hostname: webhost-${INTERNAL_DOMAIN}
    volumes:
      - ./components/webhost/config.json:/usr/webhost/config.json
      - ./components/spa/config.json:/usr/webhost/content/config.json
      - ./certs/example.server.p12:/usr/webhost/certs/example.server.p12
    environment:
      NODE_ENV: 'production'

  #
  # Deploy the example business API, which is a simple API that just validates JWTs
  # It runs on port 3002 inside the cluster at https://api.internal-example.com:3002
  # The SPA accesses it via the API gateway at https://api.example.com/api
  # The API calls the authorization server's JWKS endpoint inside the cluster
  #
  business-api:
    image: business-api:1.0.0
    hostname: api-${INTERNAL_DOMAIN}
    volumes:
      - ./components/api/config.json:/usr/api/config.json
      - ./certs/example.ca.pem:/usr/api/certs/example.ca.pem
      - ./certs/example.server.p12:/usr/api/certs/example.server.p12
    environment:
      NODE_EXTRA_CA_CERTS: '/usr/api/certs/example.ca.pem'

  #
  # The OAuth Agent is hosted here, to perform the OpenID Connect work
  # It runs on port 3001 inside the cluster at https://oauthagent.internal-example.com:3001
  # The SPA accesses it via the API gateway at https://api.example.com/oauth-agent
  # The OAuth Agent calls the authorization server's token endpoint inside the cluster
  #
  oauth-agent:
    image: oauthagent:1.0.0
    hostname: oauthagent-${INTERNAL_DOMAIN}
    volumes:
      - ./certs/example.ca.pem:/usr/api/certs/example.ca.pem
      - ./certs/example.client.p12:/usr/api/certs/example.client.p12
      - ./certs/example.server.p12:/usr/api/certs/example.server.p12
    environment:
      PORT: 3001
      SERVER_CERT_P12_PATH: './certs/example.server.p12'
      SERVER_CERT_P12_PASSWORD: 'Password1'
      CLIENT_CERT_P12_PATH: './certs/example.client.p12'
      CLIENT_CERT_P12_PASSWORD: 'Password1'
      CA_CERT_PEM_PATH: './certs/example.ca.pem'
      TRUSTED_WEB_ORIGIN: "https://${WEB_DOMAIN}"
      ISSUER: "${ISSUER_URI}"
      JWKS_URI: '${JWKS_ENDPOINT}'
      AUTHORIZE_ENDPOINT: '${AUTHORIZE_INTERNAL_ENDPOINT}'
      AUTHORIZE_EXTERNAL_ENDPOINT: "${AUTHORIZE_ENDPOINT}"
      TOKEN_ENDPOINT: '${TOKEN_ENDPOINT}'
      USERINFO_ENDPOINT: '${USERINFO_ENDPOINT}'
      LOGOUT_ENDPOINT: "${LOGOUT_ENDPOINT}"
      CLIENT_ID: 'spa-client'
      REDIRECT_URI: 'https://${WEB_DOMAIN}/'
      POST_LOGOUT_REDIRECT_URI: 'https://${WEB_DOMAIN}/'
      SCOPE: 'openid profile'
      COOKIE_DOMAIN: '${API_DOMAIN}'
      COOKIE_NAME_PREFIX: 'example'
      COOKIE_ENCRYPTION_KEY: "${ENCRYPTION_KEY}"
      CORS_ENABLED: '${CORS_ENABLED}'
    command: >
      sh -c "keytool -import -alias example.ca -cacerts -file /usr/api/certs/example.ca.pem -storepass changeit -noprompt &&
             su apiuser &&
             java -jar /usr/api/oauth-agent-0.0.1-SNAPSHOT.jar"

  #
  # The Kong API gateway exposes API endpoints to the browser at https://api.example.com
  # The API gateway routes to the OAuth agent and the business API inside the cluster
  #
  kong-api-gateway:
    image: custom_kong:3.9.0
    hostname: apigateway
    ports:
      - 443:3000
    volumes:
      - ./components/api-gateway/kong/kong.yml:/usr/local/kong/declarative/kong.yml
      - ./certs/example.ca.pem:/usr/local/share/certs/example.ca.pem
      - ./certs/example.server.key:/usr/local/share/certs/example.server.key
      - ./certs/example.server.pem:/usr/local/share/certs/example.server.pem
    environment:
      KONG_DATABASE: 'off'
      KONG_DECLARATIVE_CONFIG: '/usr/local/kong/declarative/kong.yml'
      KONG_PROXY_LISTEN: '0.0.0.0:3000 ssl'
      KONG_SSL_CERT: '/usr/local/share/certs/example.server.pem'
      KONG_SSL_CERT_KEY: './usr/local/share/certs/example.server.key'
      KONG_LUA_SSL_TRUSTED_CERTIFICATE: './usr/local/share/certs/example.ca.pem'
      KONG_LOG_LEVEL: 'info'
      KONG_PLUGINS: 'bundled,oauth-proxy,phantom-token'
      KONG_NGINX_HTTP_LUA_SHARED_DICT: 'phantom-token 10m'
    profiles:
      - KONG

  #
  # A gateway that uses NGINX and C modules
  #
  nginx-api-gateway:
    image: custom_nginx:1.27.4-alpine
    hostname: apigateway
    ports:
      - 443:3000
    volumes:
      - ./components/api-gateway/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./components/api-gateway/nginx/default.conf:/etc/nginx/templates/default.conf.template
      - ./certs/example.ca.pem:/usr/local/share/certs/example.ca.pem
      - ./certs/example.server.key:/usr/local/share/certs/example.server.key
      - ./certs/example.server.pem:/usr/local/share/certs/example.server.pem
    profiles:
      - NGINX

  #
  # A gateway that uses OpenResty and LUA plugins
  #
  openresty-api-gateway:
    image: custom_openresty/openresty:1.27.1.2-noble
    hostname: apigateway
    ports:
      - 443:3000
    volumes:
      - ./components/api-gateway/openresty/default.conf:/etc/nginx/conf.d/default.conf
      - ./certs/example.ca.pem:/usr/local/share/certs/example.ca.pem
      - ./certs/example.server.key:/usr/local/share/certs/example.server.key
      - ./certs/example.server.pem:/usr/local/share/certs/example.server.pem
    profiles:
      - OPENRESTY

  #
  # A SQL database used by the Curity Identity Server
  #
  curity-data:
    image: postgres:17.4
    hostname: dbserver
    volumes:
      - ./components/idsvr/data-backup.sql:/docker-entrypoint-initdb.d/data-backup.sql
    environment:
      POSTGRES_USER: 'postgres'
      POSTGRES_PASSWORD: 'Password1'
      POSTGRES_DB: 'idsvr'
    
  #
  # A standalone instance of the Curity Identity Server
  #
  curity-idsvr:
    image: curity.azurecr.io/curity/idsvr:latest
    hostname: login-${INTERNAL_DOMAIN}
    ports:
      - 6749:6749
      - 8443:8443
    volumes:
      - ../../license.json:/opt/idsvr/etc/init/license/license.json
      - ./components/idsvr/config-backup.xml:/opt/idsvr/etc/init/config.xml
    environment:
      PASSWORD: 'Password1'
      FINANCIAL_GRADE_CLIENT_CA: "${FINANCIAL_GRADE_CLIENT_CA}"
      IDSVR_BASE_URL: "${IDSVR_BASE_URL}"
      WEB_DOMAIN: "${WEB_DOMAIN}"
      BASE_DOMAIN: "${BASE_DOMAIN}"
      LOGGING_LEVEL: 'INFO'
