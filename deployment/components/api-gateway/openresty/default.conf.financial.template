########################################################################################
# An NGINX configuration to test Lua plugins for the example SPA in an end-to-end manner
########################################################################################

lua_shared_dict phantom-token 10m;
server {
    server_name apigateway;
    listen      3000 ssl;

    ssl_certificate             /usr/local/share/certs/example.server.pem;
    ssl_certificate_key         /usr/local/share/certs/example.server.key;
    ssl_trusted_certificate     /usr/local/share/certs/example.ca.pem;
    lua_ssl_trusted_certificate /usr/local/share/certs/example.ca.pem;

    location / {
        
        # Use the Docker embedded DNS server
        resolver 127.0.0.11;
        
        # Route directly to web static content
        proxy_pass $SCHEME://webhost-$INTERNAL_DOMAIN:3000/;
    }

    location /oauth-agent {

        # Use the Docker embedded DNS server
        resolver 127.0.0.11;
        
        # Route directly to the OAuth Agent inside the cluster
        proxy_pass $SCHEME://oauthagent-$INTERNAL_DOMAIN:3001/oauth-agent;
    }
 
    location /api/ {

        # Use the Docker embedded DNS server
        resolver 127.0.0.11;

        rewrite_by_lua_block {

            -- First run the OAuth Proxy plugin to translate secure cookies to opaque access tokens
            local oauthProxy = require 'resty.oauth-proxy'
            local oauthProxyConfig = {
                cookie_name_prefix = 'example',
                encryption_key = '$ENCRYPTION_KEY',
                trusted_web_origins = {
                    '$SCHEME://$WEB_DOMAIN'
                },
                cors_enabled = $CORS_ENABLED
            }
            oauthProxy.run(oauthProxyConfig)

            -- Then run the Phantom Token plugin to translate opaque access tokens to JWT access tokens
            local phantomToken = require 'resty.phantom-token'
            local phantomTokenConfig = {
                introspection_endpoint = '$INTROSPECTION_ENDPOINT',
                client_id = 'api-gateway-client',
                client_secret = 'Password1',
                cache_name = 'phantom-token',
                token_cache_seconds = 900
            }
            phantomToken.run(phantomTokenConfig)
        }

        # Then forward the JWT to the below API
        proxy_pass $SCHEME://api-$INTERNAL_DOMAIN:3002/;
    }
}
